/*
  Client -> Server -> DataBase -> Server -> Client
*/

/**
 * Способ работы и управления асинхронностями в js
 *
 * Симуляция работы клиента и сервера
 * Цепочка callbacks, которая показывает как происходит взаимодействие клиента и сервера
 *
 *
 * Нужно выполнить ПОСЛЕДОВАТЕЛЬНО некоторое количество асинхронности.
 * Например, сначала получаем одну сущность, например id пользователя и его данные.
 * Потом нужно получить список его фотографий, а фотографии лежат отдельно.
 *
 * Поэтому, получив сначала список пользователей - есть уже какие-то данные,
 * далее отправляем запрос на получение фотографий.
 * Делать это должны строго последовательно!
 *
 * Тут проблема в формате кода - т.е. получается очень большая вложенность - 4 setTimeout.
 * Вместо них могут быть функции по работе с сервером, которые вложены друг в друга.
 * Получается дерево callbacks (function)
 *
 * При данном подходе можно легко запутаться!
 * Использование callbacks не есть корректно!
 */

console.log('Клиент: хочу получить список пользователей');
console.log('...');

setTimeout(function () {
    console.log('Сервер: запрашиваю список пользователей в БД');
    console.log('...');

    setTimeout(function () {
        console.log('БД: формирую список пользователей');
        console.log('...');

        setTimeout(function () {
            console.log('Сервер: трансформирую данные для клиента');
            console.log('...');

            setTimeout(function () {
                console.log('Клиент: получил данные и отображаю их');
            }, 1000)
        }, 500)
    }, 500)
}, 1000)