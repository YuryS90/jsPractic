/**
 * На примере объекта контекст
 *
 *
 * Через задержку выводиться без значений
 * Name:
 * Job: undefined
 * Age: undefined
 *
 * Без setTimeout всё работает корректно,
 * а с появлением setTimeout - this является объектом Window, а не person
 *
 * Когда создаём функцию через "function" в рамках {},
 * она создаёт свою область видимости, т.е. скоуп,
 * и внутри данной функции присутствует своё собственное ключевое this
 *
 * Т.е., когда создавали function №1 от объекта person получаем ключевое слово this,
 * потому что находились внутри объекта person, но когда передаём function внутри метода
 * setTimeout, то создаём не от person данную функцию, а от глобального объекта Window
 * и поэтому ключевое слово this является объектом Window - window.setTimeout.
 *
 * Ключевое слово this превратилось в Window, поэтому данные person потерялись!
 *
 * 3 способа как решить проблему
 * 1-й способ.
 * Обратиться к замыканиям. Создав функцию displayInfo имеем доступ к this,
 * который принадлежит объекту person. Создавая функцию displayInfo можно создать
 * переменную и присвоить this, который является объектом person: let self = this,
 * тогда в функции №2 обращение будет не к this, а к замыканию self
 *
 * 2-й способ.
 * Создавая определённые функции форсировано привязывать к ним нужный контекст,
 * вызвав метод bind(), передав контекст this.
 * bind()- не внутри function №2, который всё ещё является объектом person
 * Т.е. привязали контекст this, с помощью метода bind, поэтому функция №2 не является
 * держателем контекста window. №2 будет обращать внимание на контекст this
 *
 * 3-й рассмотриться в блоке EC6
 *
 */

let person = {
  age: 28,
  name: 'Max',
  job: 'Frontend',

  // Функция, которая собирает информацию по объекту person, и
  // выводит её в консоль через какое-то время
  displayInfo: function (ms) { // №1
    //console.log(this);
    //let self = this; // для способа 1

    // setTimeout:
    // 1-м параметр - функция, которая будет выполнена, через какое-то время
    // 2-й параметр - м/с
    setTimeout(function () { // №2
      //debugger // debug, без .bind(this) видно, что this является объектом Window, а не person
      console.log('Name: ', this.name); // self.name для способа 1
      console.log('Job:', this.job); // self.job для способа 1
      console.log('Age: ', this.age); // self.age для способа 1
    }.bind(this), ms)
  }
};

// Через сколько выводить данную информацию
person.displayInfo(5000);