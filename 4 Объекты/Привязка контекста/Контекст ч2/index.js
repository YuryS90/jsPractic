/**
 * printObject - функция, которая печатает объект и его ключи.
 * Принимает название объекта, а не сам объект
 *
 * Для двух объектов person и car будет использоваться одна и та же функция printObject
 * Как это сделать? Воспользуемся способом привязки контекста.
 * В самой функции будем обращаться к ключевому слову this
 *
 * Создавая функцию таким образом, она создаётся от глобального Window!
 * В результате получим собственные поля (лишние) объекта Window.
 * Для этого есть способы привязки контекста. Когда привязываем контекст, тогда
 * форсируем ключевое слово this.
 * Т.е. передаём this в функцию и после этого то, что передаём в качестве контекста будет
 * использоваться в цикле через this
 *
 * Например, чтобы вывести объект person в консоль, то вызываем printObject и вместо того
 * чтобы её вызывать printObject() - вызываем .bind()
 * bind первым параметром принимает контекст, т.е. то чем будет являться this в function,
 * например, передаём в bind person. Ключевое слово this будет объектом person.
 * Метод bind() возвращает новую функцию с привязанным контекстом.
 * Переменная printPerson является этой новой функцией, в которую передаём objName
 *
 * Метод call() аналогичен методу bind, за исключением, что call сразу вызывает эту функцию
 * т.е. не возвращает новую, а сразу вызывает.
 * Первым параметром принимает контекст, остальные параметры, то что требует printObject
 * это один параметр - objName.
 *
 * Метод apply(). Аналогичен методу call(), за исключением, те аргументы, которые передаются
 * в printObject, идут не бесконечным рядом параметров через запятую, а массивом.
 * Первым параметром принимает также тот объект, который будет в качестве контекста.
 *
 * Итог
 * Можно создать какую-то уникальную функцию, например, printObject, которая работает
 * с this, которая будет применима для широкого спектра задач и дальше привязывая
 * какой-либо контекст (в нашем случае просто передача объекта) можно пользоваться фукнцией
 * в любых целях
 *
 */

function printObject(objName) {
  console.log('Printing object: ', objName);

  // Итерация объекта на наличие всех ключей и получить нужные значения
  // При помощи оператора in итерируем по объекту.
  // Объект в данном случае - this
  for (let key in this) {
    // Выводим только те ключи, которые принадлежат к объекту
    if (this.hasOwnProperty(key)) {
      console.log('[' + key + ']', this[key]);
    }
  }
}

// Пример объекта, который будем печатать
let person = {
  firstName: 'Max',
  job: 'Backend',
  age: 29,
  friends: ['Elena', 'Igor']
};

// Пример объекта, который будем печатать
let car = {
  name: 'Ford',
  model: 'Focus',
  year: 2017
};

let printPerson = printObject.bind(person);
printPerson('Person');

printObject.call(car, 'Car');

printObject.apply(person, ['Person']);