/**
 * Определить метод для всех массивов
 *
 * Реализуйте возможность используя прототип, чтобы у каждого массива был новый метод,
 * позволяющий удваивать значение каждого элемента с учетом типа данных таким образом,
 * чтобы:
 * 1. Для чисел это возведение в квадрат
 * 2. Для строк это удваивание строки
 *
 * Пример:
 * [1, 2, 3] => [1, 4, 9]
 * [5, 'Hello', 6] => [25, 'HelloHello', 36]
 */

let a = [1, 2, 3];
let b = [5, 'Hello', 6];

/**
 * Общий метод для всех массивов, обращаясь к глобальному классу Array,
 * а дальше к его прототипу через свойство prototype. После задаём СВОЮ функцию double.
 * Данный метод ничего не будет принимать в качестве параметров, поэтому пустая строка ()
 * в виде аргументов
 */

Array.prototype.double = function () {
    /**
     * В первую очередь нужно обратиться к элементам массивов "а" и "b"
     * Так как создаём функцию через function, то this в данном случае будет
     * указывать на текущий массив
     * У массивов есть метод map(), который возвращает какой-то новый массив.
     * Метод map() принимает функцию колбэк, которая на каждой итерации будет получать
     * текущий элемент массива - item. И в методе map() должны вернуть изменённый item
     */
    return this.map(function (item) {

      // является ли числом элемент
        if (typeof item === 'number') {

          // Возвращаем item возведённый в степень (квадрат)
            return Math.pow(item, 2);
        }

        // является ли элемент строкой, то вернуть склеить строки
        if (typeof item === 'string') {
            return item += item;
        }
    });
}

// Реализация метода double()
// Результат работы массива "а" и "b", у которых появился данный метод
let newA = a.double();
let newB = b.double();

// newA.double() - возвели ещё раз в квадрат и получили новый массив
console.log('A', newA.double());
console.log('B', newB);